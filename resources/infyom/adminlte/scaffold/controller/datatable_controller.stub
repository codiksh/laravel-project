<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_DATATABLES$\$MODEL_NAME$DataTable;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REQUEST$;
use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use App\MyClasses\GeneralHelperFunctions;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Flash;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Response;
use Illuminate\Support\Facades\DB;

class $MODEL_NAME$Controller extends AppBaseController
{
    /** @var  $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param $MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable
     * @return Response
     */
    public function index($MODEL_NAME$DataTable $$MODEL_NAME_CAMEL$DataTable)
    {
        return $$MODEL_NAME_CAMEL$DataTable->render('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index');
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        DB::beginTransaction();
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);
        DB::commit();

        return Response::json(['message' => '$MODEL_NAME$ has been created successfully.'
                    . GeneralHelperFunctions::getSuccessResponseBtn($$MODEL_NAME_CAMEL$, route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.edit', $$MODEL_NAME_CAMEL$))]);
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     *
     * @return Response
     */
    public function show($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     *
     * @return Response
     */
    public function edit($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     * @param Update$MODEL_NAME$Request $request
     *
     * @return \Illuminate\Http\JsonResponse
     */
    public function update($MODEL_NAME$ $$MODEL_NAME_CAMEL$, Update$MODEL_NAME$Request $request)
    {
        DB::beginTransaction();
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $$MODEL_NAME_CAMEL$->id);
        DB::commit();

        return Response::json(['message' => '$MODEL_NAME$ updated successfully.']);
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  $MODEL_NAME$ $$MODEL_NAME_CAMEL$
     *
     * @return \Illuminate\Http\JsonResponse
     * @throws \Exception
     */
    public function destroy($MODEL_NAME$ $$MODEL_NAME_CAMEL$)
    {
        $this->$MODEL_NAME_CAMEL$Repository->delete($$MODEL_NAME_CAMEL$->id);

        return Response::json(['message' => '$MODEL_NAME_HUMAN$ deleted successfully']);
    }
}
